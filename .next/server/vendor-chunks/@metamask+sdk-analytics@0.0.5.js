"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@metamask+sdk-analytics@0.0.5";
exports.ids = ["vendor-chunks/@metamask+sdk-analytics@0.0.5"];
exports.modules = {

/***/ "(ssr)/./node_modules/.pnpm/@metamask+sdk-analytics@0.0.5/node_modules/@metamask/sdk-analytics/dist/index.js":
/*!*************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@metamask+sdk-analytics@0.0.5/node_modules/@metamask/sdk-analytics/dist/index.js ***!
  \*************************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(\n  // If the importer is in node compatibility mode or this is not an ESM\n  // file that has been converted to a CommonJS file using a Babel-\n  // compatible transform (i.e. \"__esModule\" has not been set), then set\n  // \"default\" to the CommonJS \"module.exports\" for node compatibility.\n  isNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", { value: mod, enumerable: true }) : target,\n  mod\n));\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\n\n// src/index.ts\nvar index_exports = {};\n__export(index_exports, {\n  analytics: () => analytics\n});\nmodule.exports = __toCommonJS(index_exports);\n\n// src/analytics.ts\nvar import_openapi_fetch = __toESM(__webpack_require__(/*! openapi-fetch */ \"(ssr)/./node_modules/.pnpm/openapi-fetch@0.13.8/node_modules/openapi-fetch/dist/cjs/index.cjs\"));\n\n// src/sender.ts\nvar Sender = class {\n  constructor(options) {\n    this.batch = [];\n    this.maxTimeoutMs = 3e4;\n    this.timeoutId = null;\n    this.isSending = false;\n    this.batchSize = options.batchSize;\n    this.baseTimeoutMs = options.baseTimeoutMs;\n    this.currentTimeoutMs = options.baseTimeoutMs;\n    this.sendFn = options.sendFn;\n  }\n  enqueue(item) {\n    this.batch.push(item);\n    this.schedule();\n  }\n  schedule() {\n    if (this.batch.length > 0 && !this.timeoutId) {\n      this.timeoutId = setTimeout(() => {\n        this.timeoutId = null;\n        this.flush();\n      }, this.currentTimeoutMs);\n    }\n  }\n  async flush() {\n    if (this.isSending || this.batch.length === 0) {\n      return;\n    }\n    this.isSending = true;\n    const current = [...this.batch.slice(0, this.batchSize)];\n    this.batch = this.batch.slice(this.batchSize);\n    try {\n      await this.sendFn(current);\n      this.currentTimeoutMs = this.baseTimeoutMs;\n    } catch (error) {\n      console.error(\"Sender: Failed to send batch\", error);\n      this.batch = [...current, ...this.batch];\n      this.currentTimeoutMs = Math.min(\n        this.currentTimeoutMs * 2,\n        this.maxTimeoutMs\n      );\n    } finally {\n      this.isSending = false;\n      this.schedule();\n    }\n  }\n};\nvar sender_default = Sender;\n\n// src/analytics.ts\nvar Analytics = class {\n  constructor(baseUrl) {\n    this.enabled = false;\n    this.properties = {};\n    const client2 = (0, import_openapi_fetch.default)({ baseUrl });\n    const sendFn = async (batch) => {\n      const res = await client2.POST(\"/v1/events\", { body: batch });\n      if (res.response.status !== 200) {\n        throw new Error(res.error);\n      }\n    };\n    this.sender = new sender_default({ batchSize: 100, baseTimeoutMs: 200, sendFn });\n  }\n  enable() {\n    this.enabled = true;\n  }\n  setGlobalProperty(key, value) {\n    this.properties[key] = value;\n  }\n  track(name, properties) {\n    if (!this.enabled) {\n      return;\n    }\n    const event = {\n      name,\n      ...this.properties,\n      ...properties\n    };\n    this.sender.enqueue(event);\n  }\n};\nvar analytics_default = Analytics;\n\n// src/index.ts\nvar endpoint;\nvar _a;\nif (typeof process !== \"undefined\" && process.env) {\n  endpoint = (_a = process.env.METAMASK_ANALYTICS_ENDPOINT) != null ? _a : process.env.NEXT_PUBLIC_METAMASK_ANALYTICS_ENDPOINT;\n}\nvar METAMASK_ANALYTICS_ENDPOINT = endpoint != null ? endpoint : \"https://mm-sdk-analytics.api.cx.metamask.io/\";\nvar client = new analytics_default(METAMASK_ANALYTICS_ENDPOINT);\nvar analytics = client;\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQG1ldGFtYXNrK3Nkay1hbmFseXRpY3NAMC4wLjUvbm9kZV9tb2R1bGVzL0BtZXRhbWFzay9zZGstYW5hbHl0aWNzL2Rpc3QvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCLGtDQUFrQztBQUNoRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCLDRGQUE0RjtBQUN6SDtBQUNBO0FBQ0E7QUFDQSxtR0FBbUc7QUFDbkc7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5RUFBeUUsOEJBQThCO0FBQ3ZHO0FBQ0E7QUFDQSxvREFBb0Qsa0JBQWtCLGFBQWE7O0FBRW5GO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEOztBQUVBO0FBQ0EsbUNBQW1DLG1CQUFPLENBQUMsb0hBQWU7O0FBRTFEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0RBQXdELFNBQVM7QUFDakU7QUFDQSxxREFBcUQsYUFBYTtBQUNsRTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVDQUF1Qyw0Q0FBNEM7QUFDbkY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU0sQ0FFTCIsInNvdXJjZXMiOlsiRDpcXGxpdHRlbGV4dVxcQ0JBLUZFXFxub2RlX21vZHVsZXNcXC5wbnBtXFxAbWV0YW1hc2src2RrLWFuYWx5dGljc0AwLjAuNVxcbm9kZV9tb2R1bGVzXFxAbWV0YW1hc2tcXHNkay1hbmFseXRpY3NcXGRpc3RcXGluZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9fY3JlYXRlID0gT2JqZWN0LmNyZWF0ZTtcbnZhciBfX2RlZlByb3AgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG52YXIgX19nZXRPd25Qcm9wRGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG52YXIgX19nZXRPd25Qcm9wTmFtZXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcztcbnZhciBfX2dldFByb3RvT2YgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Y7XG52YXIgX19oYXNPd25Qcm9wID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbnZhciBfX2V4cG9ydCA9ICh0YXJnZXQsIGFsbCkgPT4ge1xuICBmb3IgKHZhciBuYW1lIGluIGFsbClcbiAgICBfX2RlZlByb3AodGFyZ2V0LCBuYW1lLCB7IGdldDogYWxsW25hbWVdLCBlbnVtZXJhYmxlOiB0cnVlIH0pO1xufTtcbnZhciBfX2NvcHlQcm9wcyA9ICh0bywgZnJvbSwgZXhjZXB0LCBkZXNjKSA9PiB7XG4gIGlmIChmcm9tICYmIHR5cGVvZiBmcm9tID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBmcm9tID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICBmb3IgKGxldCBrZXkgb2YgX19nZXRPd25Qcm9wTmFtZXMoZnJvbSkpXG4gICAgICBpZiAoIV9faGFzT3duUHJvcC5jYWxsKHRvLCBrZXkpICYmIGtleSAhPT0gZXhjZXB0KVxuICAgICAgICBfX2RlZlByb3AodG8sIGtleSwgeyBnZXQ6ICgpID0+IGZyb21ba2V5XSwgZW51bWVyYWJsZTogIShkZXNjID0gX19nZXRPd25Qcm9wRGVzYyhmcm9tLCBrZXkpKSB8fCBkZXNjLmVudW1lcmFibGUgfSk7XG4gIH1cbiAgcmV0dXJuIHRvO1xufTtcbnZhciBfX3RvRVNNID0gKG1vZCwgaXNOb2RlTW9kZSwgdGFyZ2V0KSA9PiAodGFyZ2V0ID0gbW9kICE9IG51bGwgPyBfX2NyZWF0ZShfX2dldFByb3RvT2YobW9kKSkgOiB7fSwgX19jb3B5UHJvcHMoXG4gIC8vIElmIHRoZSBpbXBvcnRlciBpcyBpbiBub2RlIGNvbXBhdGliaWxpdHkgbW9kZSBvciB0aGlzIGlzIG5vdCBhbiBFU01cbiAgLy8gZmlsZSB0aGF0IGhhcyBiZWVuIGNvbnZlcnRlZCB0byBhIENvbW1vbkpTIGZpbGUgdXNpbmcgYSBCYWJlbC1cbiAgLy8gY29tcGF0aWJsZSB0cmFuc2Zvcm0gKGkuZS4gXCJfX2VzTW9kdWxlXCIgaGFzIG5vdCBiZWVuIHNldCksIHRoZW4gc2V0XG4gIC8vIFwiZGVmYXVsdFwiIHRvIHRoZSBDb21tb25KUyBcIm1vZHVsZS5leHBvcnRzXCIgZm9yIG5vZGUgY29tcGF0aWJpbGl0eS5cbiAgaXNOb2RlTW9kZSB8fCAhbW9kIHx8ICFtb2QuX19lc01vZHVsZSA/IF9fZGVmUHJvcCh0YXJnZXQsIFwiZGVmYXVsdFwiLCB7IHZhbHVlOiBtb2QsIGVudW1lcmFibGU6IHRydWUgfSkgOiB0YXJnZXQsXG4gIG1vZFxuKSk7XG52YXIgX190b0NvbW1vbkpTID0gKG1vZCkgPT4gX19jb3B5UHJvcHMoX19kZWZQcm9wKHt9LCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KSwgbW9kKTtcblxuLy8gc3JjL2luZGV4LnRzXG52YXIgaW5kZXhfZXhwb3J0cyA9IHt9O1xuX19leHBvcnQoaW5kZXhfZXhwb3J0cywge1xuICBhbmFseXRpY3M6ICgpID0+IGFuYWx5dGljc1xufSk7XG5tb2R1bGUuZXhwb3J0cyA9IF9fdG9Db21tb25KUyhpbmRleF9leHBvcnRzKTtcblxuLy8gc3JjL2FuYWx5dGljcy50c1xudmFyIGltcG9ydF9vcGVuYXBpX2ZldGNoID0gX190b0VTTShyZXF1aXJlKFwib3BlbmFwaS1mZXRjaFwiKSk7XG5cbi8vIHNyYy9zZW5kZXIudHNcbnZhciBTZW5kZXIgPSBjbGFzcyB7XG4gIGNvbnN0cnVjdG9yKG9wdGlvbnMpIHtcbiAgICB0aGlzLmJhdGNoID0gW107XG4gICAgdGhpcy5tYXhUaW1lb3V0TXMgPSAzZTQ7XG4gICAgdGhpcy50aW1lb3V0SWQgPSBudWxsO1xuICAgIHRoaXMuaXNTZW5kaW5nID0gZmFsc2U7XG4gICAgdGhpcy5iYXRjaFNpemUgPSBvcHRpb25zLmJhdGNoU2l6ZTtcbiAgICB0aGlzLmJhc2VUaW1lb3V0TXMgPSBvcHRpb25zLmJhc2VUaW1lb3V0TXM7XG4gICAgdGhpcy5jdXJyZW50VGltZW91dE1zID0gb3B0aW9ucy5iYXNlVGltZW91dE1zO1xuICAgIHRoaXMuc2VuZEZuID0gb3B0aW9ucy5zZW5kRm47XG4gIH1cbiAgZW5xdWV1ZShpdGVtKSB7XG4gICAgdGhpcy5iYXRjaC5wdXNoKGl0ZW0pO1xuICAgIHRoaXMuc2NoZWR1bGUoKTtcbiAgfVxuICBzY2hlZHVsZSgpIHtcbiAgICBpZiAodGhpcy5iYXRjaC5sZW5ndGggPiAwICYmICF0aGlzLnRpbWVvdXRJZCkge1xuICAgICAgdGhpcy50aW1lb3V0SWQgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgdGhpcy50aW1lb3V0SWQgPSBudWxsO1xuICAgICAgICB0aGlzLmZsdXNoKCk7XG4gICAgICB9LCB0aGlzLmN1cnJlbnRUaW1lb3V0TXMpO1xuICAgIH1cbiAgfVxuICBhc3luYyBmbHVzaCgpIHtcbiAgICBpZiAodGhpcy5pc1NlbmRpbmcgfHwgdGhpcy5iYXRjaC5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhpcy5pc1NlbmRpbmcgPSB0cnVlO1xuICAgIGNvbnN0IGN1cnJlbnQgPSBbLi4udGhpcy5iYXRjaC5zbGljZSgwLCB0aGlzLmJhdGNoU2l6ZSldO1xuICAgIHRoaXMuYmF0Y2ggPSB0aGlzLmJhdGNoLnNsaWNlKHRoaXMuYmF0Y2hTaXplKTtcbiAgICB0cnkge1xuICAgICAgYXdhaXQgdGhpcy5zZW5kRm4oY3VycmVudCk7XG4gICAgICB0aGlzLmN1cnJlbnRUaW1lb3V0TXMgPSB0aGlzLmJhc2VUaW1lb3V0TXM7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoXCJTZW5kZXI6IEZhaWxlZCB0byBzZW5kIGJhdGNoXCIsIGVycm9yKTtcbiAgICAgIHRoaXMuYmF0Y2ggPSBbLi4uY3VycmVudCwgLi4udGhpcy5iYXRjaF07XG4gICAgICB0aGlzLmN1cnJlbnRUaW1lb3V0TXMgPSBNYXRoLm1pbihcbiAgICAgICAgdGhpcy5jdXJyZW50VGltZW91dE1zICogMixcbiAgICAgICAgdGhpcy5tYXhUaW1lb3V0TXNcbiAgICAgICk7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIHRoaXMuaXNTZW5kaW5nID0gZmFsc2U7XG4gICAgICB0aGlzLnNjaGVkdWxlKCk7XG4gICAgfVxuICB9XG59O1xudmFyIHNlbmRlcl9kZWZhdWx0ID0gU2VuZGVyO1xuXG4vLyBzcmMvYW5hbHl0aWNzLnRzXG52YXIgQW5hbHl0aWNzID0gY2xhc3Mge1xuICBjb25zdHJ1Y3RvcihiYXNlVXJsKSB7XG4gICAgdGhpcy5lbmFibGVkID0gZmFsc2U7XG4gICAgdGhpcy5wcm9wZXJ0aWVzID0ge307XG4gICAgY29uc3QgY2xpZW50MiA9ICgwLCBpbXBvcnRfb3BlbmFwaV9mZXRjaC5kZWZhdWx0KSh7IGJhc2VVcmwgfSk7XG4gICAgY29uc3Qgc2VuZEZuID0gYXN5bmMgKGJhdGNoKSA9PiB7XG4gICAgICBjb25zdCByZXMgPSBhd2FpdCBjbGllbnQyLlBPU1QoXCIvdjEvZXZlbnRzXCIsIHsgYm9keTogYmF0Y2ggfSk7XG4gICAgICBpZiAocmVzLnJlc3BvbnNlLnN0YXR1cyAhPT0gMjAwKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihyZXMuZXJyb3IpO1xuICAgICAgfVxuICAgIH07XG4gICAgdGhpcy5zZW5kZXIgPSBuZXcgc2VuZGVyX2RlZmF1bHQoeyBiYXRjaFNpemU6IDEwMCwgYmFzZVRpbWVvdXRNczogMjAwLCBzZW5kRm4gfSk7XG4gIH1cbiAgZW5hYmxlKCkge1xuICAgIHRoaXMuZW5hYmxlZCA9IHRydWU7XG4gIH1cbiAgc2V0R2xvYmFsUHJvcGVydHkoa2V5LCB2YWx1ZSkge1xuICAgIHRoaXMucHJvcGVydGllc1trZXldID0gdmFsdWU7XG4gIH1cbiAgdHJhY2sobmFtZSwgcHJvcGVydGllcykge1xuICAgIGlmICghdGhpcy5lbmFibGVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IGV2ZW50ID0ge1xuICAgICAgbmFtZSxcbiAgICAgIC4uLnRoaXMucHJvcGVydGllcyxcbiAgICAgIC4uLnByb3BlcnRpZXNcbiAgICB9O1xuICAgIHRoaXMuc2VuZGVyLmVucXVldWUoZXZlbnQpO1xuICB9XG59O1xudmFyIGFuYWx5dGljc19kZWZhdWx0ID0gQW5hbHl0aWNzO1xuXG4vLyBzcmMvaW5kZXgudHNcbnZhciBlbmRwb2ludDtcbnZhciBfYTtcbmlmICh0eXBlb2YgcHJvY2VzcyAhPT0gXCJ1bmRlZmluZWRcIiAmJiBwcm9jZXNzLmVudikge1xuICBlbmRwb2ludCA9IChfYSA9IHByb2Nlc3MuZW52Lk1FVEFNQVNLX0FOQUxZVElDU19FTkRQT0lOVCkgIT0gbnVsbCA/IF9hIDogcHJvY2Vzcy5lbnYuTkVYVF9QVUJMSUNfTUVUQU1BU0tfQU5BTFlUSUNTX0VORFBPSU5UO1xufVxudmFyIE1FVEFNQVNLX0FOQUxZVElDU19FTkRQT0lOVCA9IGVuZHBvaW50ICE9IG51bGwgPyBlbmRwb2ludCA6IFwiaHR0cHM6Ly9tbS1zZGstYW5hbHl0aWNzLmFwaS5jeC5tZXRhbWFzay5pby9cIjtcbnZhciBjbGllbnQgPSBuZXcgYW5hbHl0aWNzX2RlZmF1bHQoTUVUQU1BU0tfQU5BTFlUSUNTX0VORFBPSU5UKTtcbnZhciBhbmFseXRpY3MgPSBjbGllbnQ7XG4vLyBBbm5vdGF0ZSB0aGUgQ29tbW9uSlMgZXhwb3J0IG5hbWVzIGZvciBFU00gaW1wb3J0IGluIG5vZGU6XG4wICYmIChtb2R1bGUuZXhwb3J0cyA9IHtcbiAgYW5hbHl0aWNzXG59KTtcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@metamask+sdk-analytics@0.0.5/node_modules/@metamask/sdk-analytics/dist/index.js\n");

/***/ })

};
;