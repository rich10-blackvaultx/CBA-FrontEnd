// This file is generated automatically by Next.js
// Do not edit this file manually
// This file validates that all pages and layouts export the correct types

import type { AppRoutes, LayoutRoutes, ParamMap, AppRouteHandlerRoutes } from "./routes.js"
import type { ResolvingMetadata, ResolvingViewport } from "next/types.js"
import type { NextRequest } from 'next/server.js'

type AppPageConfig<Route extends AppRoutes = AppRoutes> = {
  default: React.ComponentType<{ params: Promise<ParamMap[Route]> } & any> | ((props: { params: Promise<ParamMap[Route]> } & any) => React.ReactNode | Promise<React.ReactNode> | never | void | Promise<void>)
  generateStaticParams?: (props: { params: ParamMap[Route] }) => Promise<any[]> | any[]
  generateMetadata?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingMetadata
  ) => Promise<any> | any
  generateViewport?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingViewport
  ) => Promise<any> | any
  metadata?: any
  viewport?: any
}

type LayoutConfig<Route extends LayoutRoutes = LayoutRoutes> = {
  default: React.ComponentType<LayoutProps<Route>> | ((props: LayoutProps<Route>) => React.ReactNode | Promise<React.ReactNode> | never | void | Promise<void>)
  generateStaticParams?: (props: { params: ParamMap[Route] }) => Promise<any[]> | any[]
  generateMetadata?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingMetadata
  ) => Promise<any> | any
  generateViewport?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingViewport
  ) => Promise<any> | any
  metadata?: any
  viewport?: any
}

type RouteHandlerConfig<Route extends AppRouteHandlerRoutes = AppRouteHandlerRoutes> = {
  GET?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  POST?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  PUT?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  PATCH?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  DELETE?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  HEAD?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  OPTIONS?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
}


// Validate ../../app/[locale]/bases/[slug]/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/[locale]/bases/[slug]">> = Specific
  const handler = {} as typeof import("../../app/[locale]/bases/[slug]/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/[locale]/bases/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/[locale]/bases">> = Specific
  const handler = {} as typeof import("../../app/[locale]/bases/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/[locale]/community/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/[locale]/community">> = Specific
  const handler = {} as typeof import("../../app/[locale]/community/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/[locale]/community/post/[id]/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/[locale]/community/post/[id]">> = Specific
  const handler = {} as typeof import("../../app/[locale]/community/post/[id]/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/[locale]/create/activity/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/[locale]/create/activity">> = Specific
  const handler = {} as typeof import("../../app/[locale]/create/activity/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/[locale]/jobs/[id]/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/[locale]/jobs/[id]">> = Specific
  const handler = {} as typeof import("../../app/[locale]/jobs/[id]/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/[locale]/jobs/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/[locale]/jobs">> = Specific
  const handler = {} as typeof import("../../app/[locale]/jobs/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/[locale]/me/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/[locale]/me">> = Specific
  const handler = {} as typeof import("../../app/[locale]/me/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/[locale]/nodes/[id]/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/[locale]/nodes/[id]">> = Specific
  const handler = {} as typeof import("../../app/[locale]/nodes/[id]/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/[locale]/nodes/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/[locale]/nodes">> = Specific
  const handler = {} as typeof import("../../app/[locale]/nodes/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/[locale]/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/[locale]">> = Specific
  const handler = {} as typeof import("../../app/[locale]/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/api/activities/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/activities">> = Specific
  const handler = {} as typeof import("../../app/api/activities/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/api/bases/[slug]/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/bases/[slug]">> = Specific
  const handler = {} as typeof import("../../app/api/bases/[slug]/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/api/bases/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/bases">> = Specific
  const handler = {} as typeof import("../../app/api/bases/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/api/bids/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/bids">> = Specific
  const handler = {} as typeof import("../../app/api/bids/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/api/community/[id]/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/community/[id]">> = Specific
  const handler = {} as typeof import("../../app/api/community/[id]/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/api/community/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/community">> = Specific
  const handler = {} as typeof import("../../app/api/community/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/api/jobs/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/jobs">> = Specific
  const handler = {} as typeof import("../../app/api/jobs/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/api/nodes/[id]/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/nodes/[id]">> = Specific
  const handler = {} as typeof import("../../app/api/nodes/[id]/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/api/nodes/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/nodes">> = Specific
  const handler = {} as typeof import("../../app/api/nodes/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}





// Validate ../../app/[locale]/layout.tsx
{
  type __IsExpected<Specific extends LayoutConfig<"/[locale]">> = Specific
  const handler = {} as typeof import("../../app/[locale]/layout.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/layout.tsx
{
  type __IsExpected<Specific extends LayoutConfig<"/">> = Specific
  const handler = {} as typeof import("../../app/layout.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}
